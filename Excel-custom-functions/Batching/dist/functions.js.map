{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/functions/functions.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CustomFunctions","associate","first","second","dividend","divisor","_pushOperation","_batch","_isBatchedRequestScheduled","op","args","invocationEntry","operation","resolve","undefined","reject","promise","Promise","push","setTimeout","_makeRemoteRequest","batchCopy","splice","length","requestBatch","ms","_a","sent","map","request","result","error","_fetchFromRemoteService","item","then","responseBatch","forEach","response","index","Error"],"mappings":"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","file":"functions.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 130);\n","/**\r\n * @CustomFunction\r\n * Adds two numbers without using batching\r\n * @param first First number\r\n * @param second Second number\r\n * @returns The sum of the two numbers.\r\n */\r\nfunction addNoBatch(first: number, second: number): number {\r\n  return first + second;\r\n}\r\n\r\n/**\r\n * @CustomFunction\r\n * Divides two numbers using batching\r\n * @param dividend The number being divided\r\n * @param divisor The number to divide the dividend with\r\n * @returns The sum of the two numbers\r\n */\r\nfunction div2(dividend: number, divisor: number) {\r\n  return _pushOperation(\r\n    \"div2\",\r\n    [dividend, divisor]\r\n  );\r\n}\r\n\r\n/**\r\n * @CustomFunction\r\n * Multiplies two numbers together using batching\r\n * @param first First number to multiply\r\n * @param second Second number to multiply\r\n * @returns The product of the two numbers\r\n */\r\nfunction mul2(first: number, second: number) {\r\n  return _pushOperation(\r\n    \"mul2\",\r\n    [first, second]\r\n  );\r\n}\r\n\r\n/**\r\n * Defines the implementation of the custom functions\r\n * for the function id defined in the metadata file (functions.json).\r\n */\r\nCustomFunctions.associate(\"ADDNOBATCH\", addNoBatch);\r\nCustomFunctions.associate(\"DIV2\", div2);\r\nCustomFunctions.associate(\"MUL2\", mul2);\r\n\r\n///////////////////////////////////////\r\n\r\n// Next batch\r\ninterface IBatchEntry {\r\n  operation: string;\r\n  args: any[];\r\n  resolve: (data: any) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\ninterface IServerResponse {\r\n  result?: any;\r\n  error?: string;\r\n}\r\n\r\nconst _batch: IBatchEntry[] = [];\r\nlet _isBatchedRequestScheduled = false;\r\n\r\n// This function encloses your custom functions as individual entries,\r\n// which have some additional properties so you can keep track of whether or not\r\n// a request has been resolved or rejected.\r\nfunction _pushOperation(op: string, args: any[]) {\r\n  // Create an entry for your custom function.\r\n  const invocationEntry: IBatchEntry = {\r\n    operation: op, // e.g. sum\r\n    args: args,\r\n    resolve: undefined,\r\n    reject: undefined,\r\n  };\r\n\r\n  // Create a unique promise for this invocation,\r\n  // and save its resolve and reject functions into the invocation entry.\r\n  const promise = new Promise((resolve, reject) => {\r\n    invocationEntry.resolve = resolve;\r\n    invocationEntry.reject = reject;\r\n  });\r\n\r\n  // Push the invocation entry into the next batch.\r\n  _batch.push(invocationEntry);\r\n\r\n  // If a remote request hasn't been scheduled yet,\r\n  // schedule it after a certain timeout, e.g. 100 ms.\r\n  if (!_isBatchedRequestScheduled) {\r\n    _isBatchedRequestScheduled = true;\r\n    setTimeout(_makeRemoteRequest, 100);\r\n  }\r\n\r\n  // Return the promise for this invocation.\r\n  return promise;\r\n}\r\n\r\n// This is a private helper function, used only within your custom function add-in.\r\n// You wouldn't call _makeRemoteRequest in Excel, for example.\r\n// This function makes a request for remote processing of the whole batch,\r\n// and matches the response batch to the request batch.\r\nfunction _makeRemoteRequest() {\r\n  // Copy the shared batch and allow the building of a new batch while you are waiting for a response.\r\n  // Note the use of \"splice\" rather than \"slice\", which will modify the original _batch array\r\n  // to empty it out.\r\n  const batchCopy = _batch.splice(0, _batch.length);\r\n  _isBatchedRequestScheduled = false;\r\n\r\n  // Build a simpler request batch that only contains the arguments for each invocation.\r\n  const requestBatch = batchCopy.map((item) => {\r\n    return { operation: item.operation, args: item.args };\r\n  });\r\n\r\n  // Make the remote request.\r\n  _fetchFromRemoteService(requestBatch)\r\n    .then((responseBatch) => {\r\n      // Match each value from the response batch to its corresponding invocation entry from the request batch,\r\n      // and resolve the invocation promise with its corresponding response value.\r\n      responseBatch.forEach((response, index) => {\r\n        if (response.error) {\r\n          batchCopy[index].reject(new Error(response.error));\r\n        } else {\r\n          batchCopy[index].resolve(response);\r\n        }\r\n      });\r\n    });\r\n}\r\n\r\n// --------------------- A public API ------------------------------\r\n\r\n// This function simulates the work of a remote service. Because each service\r\n// differs, you will need to modify this function appropriately to work with the service you are using. \r\n// This function takes a batch of argument sets and returns a [promise of] batch of values.\r\n// NOTE: When implementing this function on a server, also apply an appropriate authentication mechanism\r\n//       to ensure only the correct callers can access it.\r\nasync function _fetchFromRemoteService(\r\n  requestBatch: Array<{ operation: string, args: any[] }>\r\n): Promise<IServerResponse[]> {\r\n  // Simulate a slow network request to the server;\r\n  await pause(1000);\r\n\r\n  return requestBatch.map((request): IServerResponse => {\r\n    const { operation, args } = request;\r\n\r\n    try {\r\n      if (operation === \"div2\") {\r\n        // Divide the first argument by the second argument.\r\n        return {\r\n          result: args[0] / args[1]\r\n        };\r\n      } else if (operation === \"mul2\") {\r\n        // Multiply the arguments for the given entry.\r\n        return {\r\n          result: args[0] * args[1]\r\n        };\r\n      } else {\r\n        return {\r\n          error: `Operation not supported: ${operation}`\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        error: `Operation failed: ${operation}`\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction pause(ms: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n"],"sourceRoot":""}